-------Q1-------
SELECT column_name
  FROM USER_TAB_COLS
  WHERE TABLE_NAME = 'PROF';
  
-------Q2-------  
  
SELECT * FROM USER_OBJECTS WHERE OBJECT_TYPE = 'TABLE' OR OBJECT_TYPE = 'PROCEDURE' OR OBJECT_TYPE = 'FUNCTION';

-------Q3-------

SELECT CONSTRAINT_NAME FROM USER_CONSTRAINTS;

-------Q4-------

SELECT CONSTRAINT_NAME 
FROM USER_CONSTRAINTS 
WHERE TABLE_NAME IN 
(SELECT TABLE_NAME FROM USER_TAB_COLUMNS WHERE DATA_TYPE = 'NUMBER');


/* 5 */
SELECT DISTINCT CONSTRAINT_NAME, COLUMN_NAME 
FROM USER_CONS_COLUMNS 
WHERE COLUMN_NAME IN (SELECT COLUMN_NAME FROM USER_TAB_COLUMNS WHERE DATA_TYPE ='NUMBER');


-------Q6------

SELECT DISTINCT CONSTRAINT_NAME, UC.COLUMN_NAME, UTC.DATA_TYPE
    FROM USER_CONS_COLUMNS UC JOIN USER_TAB_COLUMNS UTC
        ON UC.COLUMN_NAME = UTC.COLUMN_NAME
        WHERE DATA_TYPE = 'NUMBER';
        
        
/* 7 */
SELECT CONSTRAINT_NAME, SEARCH_CONDITION
FROM USER_CONSTRAINTS
WHERE CONSTRAINT_TYPE = 'C';

/* 8 */
SELECT AT1.COLUMN_NAME, AT1.TABLE_NAME, AT2.COLUMN_NAME, AT2.TABLE_NAME
FROM USER_TAB_COLUMNS AT1, USER_TAB_COLUMNS AT2
WHERE AT1.COLUMN_NAME = AT2.COLUMN_NAME AND AT1.TABLE_NAME != AT2.TABLE_NAME;

/* 9 */
SELECT AT1.COLUMN_NAME, AT1.TABLE_NAME, AT2.COLUMN_NAME, AT2.TABLE_NAME
FROM USER_TAB_COLUMNS AT1, USER_TAB_COLUMNS AT2
WHERE AT1.COLUMN_NAME = AT2.COLUMN_NAME AND AT1.TABLE_NAME < AT2.TABLE_NAME;

/* 10 */

CREATE VIEW PROF_INFO2 AS
    SELECT NUM_PROF, NOM_PROF,PRENOM_PROF
    FROM PROF WHERE NUM_PROF IN 
        ( SELECT NUM_PROF FROM ENSEIGNT WHERE NUM_ET IN
            ( SELECT NUM_ET FROM ETUDIANT WHERE ANNEE = 2));

SELECT * FROM PROF_INFO2;

/* 11 */

CREATE VIEW DIS AS
SELECT DISCIPLINE FROM MODULE
WHERE DISCIPLINE ='INFORMATIQUE' OR DISCIPLINE ='GESTION' OR DISCIPLE = 'MATHS'
WITH CHECK OPTION;

INSERT INTO DIS(CODE, DISCIPLINE) VALUES (2202, 'MATHS');

/* 12 */

CREATE VIEW MAT AS
SELECT *
FROM MODULE M
WHERE RESP IN(
        SELECT NUM_PROF
        FROM ENSEIGNT
        WHERE M.CODE = ENSEIGNT.CODE)
WITH CHECK OPTION;

INSERT INTO MAT (CODE, RESP) VALUES ('XXX', 99);

/* 13 */

CREATE OR REPLACE VIEW ENSEIGNEMENT AS 
SELECT * 
FROM ENSEIGNT 
WHERE CODE IN (SELECT CODE FROM MODULE)
AND NUM_PROF IN (SELECT NUM_PROF FROM PROF)
AND NUM_ET IN (SELECT NUM_ET FROM ETUDIANT)
WITH CHECK OPTION;

/* 14 */
CREATE OR REPLACE TRIGGER INS
BEFORE INSERT ON ENSEIGNT
FOR EACH ROW
DECLARE VCODE ENSEIGNT.CODE%TYPE;
BEGIN
    SELECT DISTINCT CODE INTO VCODE 
    FROM MODULE
    WHERE CODE = :NEW.CODE;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN RAISE_APPLICATION_ERROR(-20002, 'LA MATIERE NEXISTE PAS ');
END;

INSERT INTO ENSEIGNT VALUES ('MT07', 2, 13 );

CREATE OR REPLACE TRIGGER AFFECT
BEFORE INSERT OR UPDATE OF MOY_TEST, MOY_CC ON NOTATION
FOR EACH ROW
BEGIN
    IF :NEW.MOY_CC IS NULL THEN :NEW.MOY_CC := 0; END IF;
    IF :NEW.MOY_TEST IS NULL THEN :NEW.MOY_TEST := 0; END IF;
END;

UPDATE NOTATION
SET MOY_CC = NULL WHERE CODE = 'BD';

CREATE OR REPLACE TRIGGER ETUD
BEFORE INSERT OR UPDATE OF MOY_CC ON NOTATION
FOR EACH ROW
DECLARE VNUM_ET ENSEIGNT.NUM_ET%TYPE;
BEGIN
    SELECT DISTINCT NUM_ET INTO VNUM_ET
    FROM ETUDIANT
    WHERE NUM_ET = NEW.NUM_ET AND CODE = :NEW.CODE;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN RAISE_APPLICATION_ERROR(-20002, 'ELEVE SUIS PAS LA MATIERE');
END;


CREATE OR REPLACE TRIGGER SOMME
BEFORE INSERT OR UPDATE ON NOTATION
FOR EACH ROW
BEGIN
     IF (:NEW.COEFF_CC + :NEW.COEFF_CC != 100)
        THEN RAISE_APPLICATION_ERROR(-20002, 'COEFFICIENT PAS A 100 ');
     END IF;
END;

-------/TP4\-------
--Q1--
CREATE OR REPLACE Procedure RENAME_ATT(OLD_NAME IN VARCHAR2, NEW_NAME IN VARCHAR2, RELATION IN VARCHAR2) 
IS
    USER_ATT USER_TAB_COLUMNS.COLUMN.NAME%TYPE;
    DYN_ORDER VARCHAR2(300) := 'ALTER TABLE';

BEGIN 
    SELECT COLUMN.NAME into USER_ATT FROM USER_TAB_COLUMNS
    WHERE TABLE_NAME = UPPER(RELATION) AND COLUMN.NAME = UPPER(OLD_NAME);
    DYN_ORDER := DYN_ORDER || RELATION || 'RENAME COLUMN' || OLD_NAME || 'TO' || NEW_NAME;
    EXECUTE IMMEDIATE DYN_ORDER;
EXCEPTION
    WHEN NO_DATA_FOUND
    THEN DBMS_OUTPUT.PUT_LINE ('ATTRIBUT OU RELATION N''EXISTE PAS');
END;

----Q2----


CREATE OR REPLACE PROCEDURE MODIFY_BLOC
(BLOC_NAME IN VARCHAR2, BLOC_OPTION IN VARCHAR2)
IS
    BLOC_TYPE USER_OBJECTS.OBJECT_TYPE%TYPE;
    DYN_ORDER VARCHAR(300) DEFAULT NULL;
    WRONG_TYPE_OBJECT EXCEPTION;
    WRONG_OPTION EXCEPTION;
BEGIN
    SELECT OBJECT_TYPE INTO BLOC_TYPE FROM USER_OBJECTS
    WHERE OBJECT_NAME = UPPER(BLOC_NAME);
    IF BLOC_TYPE <> 'TRIGGER' AND
        (BLOC_OPTION = 'ENABLE' OR BLOC_OPTION = 'DISABLE')
    THEN RAISE WRONG_OPTION;
    END IF;
    IF BLOC_TYPE = 'PROCEDURE' THEN DYN_ORDER := 'ALTER PROCEDURE';
    ELSIF BLOC_TYPE = 'FUNCTION' THEN DYN_ORDER := 'ALTER FUNCTION';
    ELSE RAISE WRONG_TYPE_OBJECT;
    END IF;
    DBMS_OUTPUT.PUT_LINE(DYN_ORDER);
    DYN_ORDER := DYN_ORDER || BLOC_NAME || ' ' || BLOC_OPTION;
    DBMS_OUTPUT.PUT_LINE(DYN_ORDER);
    EXECUTE IMMEDIATE DYN_ORDER;    
EXCEPTION
    WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE ('L''objet n''existe pas dans la base');
    WHEN TOO_MANY_ROWS THEN
    DBMS_OUTPUT.PUT_LINE ('Il existe plusieurs objets portant ce nom');
    WHEN WRONG_OPTION THEN
    DBMS_OUTPUT.PUT_LINE ('Procédure et fonctions ne peuvent pas être activées/désactivées');
    WHEN WRONG_TYPE_OBJECT THEN
    DBMS_OUTPUT.PUT_LINE ('L''objet ne peut pas être compilé ni activé');
END;
    
-------Q3-------
    
    
CREATE OR REPLACE PROCEDURE STATATT(RELATION_NAME IN VARCHAR2, ATTRIBUT_NAME IN VARCHAR2, FUNCTION IN VARCHAR2)
IS
    ATTRIBUTE_TYPE USER_TAB_COLUMNS.DATA_TYPE%TYPE;
    DYN_ORDER VARCHAR2(200);
    RESULT VARCHAR2(30);
    INVALID_TYPE EXCEPTION;
    INVALID_FUNCTION EXCEPTION;
BEGIN
    SELECT DATA_TYPE INTO ATTRIBUT_TYPE FROM USER_TAB_COLUMNS
    WHERE TABLE_NAME = UPPER (RELATION_NAME) AND COLUMN_NAME = UPPER(ATTRIBUTE_NAME);
    IF UPPER(FUNCTION) IN ('SUM', 'AVG', 'STDDEV', 'VARIANCE') AND ATTRIBUT_TYPE != 'NUMBER' THEN RAISE INVALID_TYPE;
    END IF;
    IF UPPER (FUNCTION) NOT IN ('COUNT', 'MIN', 'MAX', 'SUM', 'AVG', 'STDDEV', 'VARIANCE') THEN RAISE INVALID_FUNCTION;
    END IF;
    
    DYN_ORDER := 'SELECT ' || FUNCTION || '(' || ATTRIBUT_NAME || ') FROM ' || RELATION_NAME;
    EXECUTE IMMEDIATE DYN_ORDER INTO RESULT;
    DBMS_OUTPUT.PUT_LINE('VALEUR POUR : ' || FUNCTION || '(' || ATTRIBUT_NAME || ') = ' || RESULT);
    
EXCEPTION 
    WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE('L''ATTRIBUT N''EXISTE PAS DANS CETTE RELATION');
    WHEN INVALID_TYPE THEN DBMS_OUTPUT.PUT_LINE('LE TYPE DE L''ATTRIBUT EST INVALIDE POUR CETTE FONCTION');
    WHEN INVALID_FUNCTION THEN DBMS_OUTPUT.PUT_LINE('LA FONCTION AGRÉGATIVE EST INCORRECTE');
END STATATT;



---Q5---
CREATE OR REPLACE TRIGGER SHOW
AFTER INSERT ON PROF
DECLARE
NB_PROF NUMBER(4,0);
BEGIN
    SELECT COUNT(*) INTO NB_PROF FROM PROF;
    DBMS_OUTPUT.PUT_LINE('NOMBRE DE PROF : '||NB_PROF);
END;
    
    
